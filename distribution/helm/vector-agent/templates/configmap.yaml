{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "libvector.configMapName" . }}
  labels:
    {{- include "libvector.labels" . | nindent 4 }}
data:
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    # Configuration for vector.
    # Docs: https://vector.dev/docs/

    # Data dir is location controlled at the `DaemonSet`.
    data_dir = "{{ .Values.globalOptions.dataDir }}"

    {{- with .Values.logSchema }}
    [log_schema]
      host_key = "{{ .hostKey }}"
      message_key = "{{ .messageKey }}"
      source_type_key = "{{ .sourceTypeKey }}"
      timestamp_key = "{{ .timestampKey }}"
    {{- end }}

    {{- with .Values.kubernetesLogsSource }}
    {{- if .enabled }}
    # Ingest logs from Kubernetes.
    [sources.{{ .sourceId }}]
      type = "kubernetes_logs"

      {{- if .config }}
      {{- tuple .sourceId .config | include "libvector.vectorSourceConfig" | nindent 4 -}}
      {{- end }}

      {{- with .rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}
    {{- end }}
    {{- end }}

    {{- if .Values.vectorSink.enabled }}
    # Send logs to the aggregator.
    [sinks.{{ .Values.vectorSink.sinkId }}]
      type = "vector"
      inputs = {{ required "You must specify the `inputs` for the built-in vector sink" .Values.vectorSink.inputs | toJson }}
      address = "{{ include "vector-agent.vectorSinkAddress" . }}"

      {{- with .Values.vectorSink.rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}

      {{- $value := (dict) -}}
      {{- $_ := set $value "type" "vector" -}}
      {{- $_ := set $value "inputs" (required "You must specify the `inputs` for the built-in vector sink" .Values.vectorSink.inputs) -}}
      {{- $_ := set $value "address" (include "vector-agent.vectorSinkAddress" .) -}}
      {{- $_ := set $value "rawConfig" .Values.vectorSink.rawConfig -}}
      {{- tuple .Values.vectorSink.sinkId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end }}

    {{- $prometheusInputs := (list) -}}
    {{- with .Values.hostMetricsSource -}}
    {{- if .enabled }}
    {{- $prometheusInputs = prepend $prometheusInputs .sourceId }}
    # Capture the metrics from the host.
    {{- $value := (dict) -}}
    {{- $_ := set $value "type" "host_metrics" -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end -}}
    {{- end -}}

    {{- merge . (dict "prometheusInputs" $prometheusInputs) | include "libvector.metricsConfigPartial" | nindent 4 -}}

    {{- include "libvector.vectorTopology" .Values | nindent 4 -}}

{{- end }}
